@page "/"

@inject ISmarthutService SmarthutService;

<div class="album py-5 bg-white">
    <div class="container">
        <div class="row">
            @foreach (var device in _devices)
            {
                <DeviceCard Device="@device"/>
            }
        </div>
    </div>
</div>

@code
{
    private IEnumerable<Device> _devices = new List<Device>();
    private HubConnection _hubConnection;


    protected override async Task OnInitializedAsync()
    {
        _devices = await SmarthutService.GetDevices();

        var result = await SmarthutService.NegotiateSignalR();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(result.Url, opt => { opt.AccessTokenProvider = async () => await Task.FromResult(result.AccessToken); })
            .Build();

        _hubConnection.On<IEnumerable<Telemetry>>("newTelemetry", telemetrys =>
        {
            _devices = VerifyTelemetryValue.SetDeviceWithTelemetry((List<Device>) _devices, (List<Telemetry>) telemetrys);
            StateHasChanged();
        });

    //Response: Alarm restored on device with id aa354970-8c24-4a16-bd01-cc0a9ef0bff3 by joji19tv@student.ju.se
        _hubConnection.On<string>("alarmNeutralized", alarm =>
        {
            var _restoredAlarmGuid = RegexMatcher.CheckAndGetGuid(alarm);
            var _userRestored = RegexMatcher.CheckAndGetEmail(alarm);

            Console.WriteLine($"{_restoredAlarmGuid} is restored by {_userRestored}");

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}